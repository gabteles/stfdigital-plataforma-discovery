buildscript {
    ext {
        springBootVersion = '1.3.5.RELEASE'
        springPlatformVersion = '2.0.5.RELEASE'
        dependencyManagementPlugin = '0.5.2.RELEASE'
        springCloudVersion = '1.1.0.RELEASE'
        swaggerVersion = '1.0.2'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementPlugin}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.8.0")
    }
}

apply plugin: "io.spring.dependency-management"

apply plugin: 'spring-boot'

apply plugin: 'eclipse'

apply plugin: 'maven'

apply plugin: 'java'

apply plugin: "com.palantir.docker"

repositories {
    mavenLocal()
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        mavenBom("org.springframework.cloud:spring-cloud-netflix:${springCloudVersion}")
        mavenBom("org.springframework.cloud:spring-cloud-starter-parent:Brixton.RELEASE")
        mavenBom("io.spring.platform:platform-bom:${springPlatformVersion}")
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter")
    
    compile("org.springframework.boot:spring-boot-starter-actuator")
        
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    
    compile("org.springframework.boot:spring-boot-starter-undertow")
    
    compile("org.springframework.cloud:spring-cloud-starter-oauth2")
    
    compile("org.springframework.cloud:spring-cloud-starter-feign")
    
    compile("org.springframework.cloud:spring-cloud-starter-eureka-server")
    
    compile("com.mangofactory:swagger-springmvc:$swaggerVersion")
    
    testCompile("org.springframework.boot:spring-boot-starter-test")
    
    testCompile("com.jayway.jsonpath:json-path")
}

import org.gradle.plugins.ide.eclipse.model.SourceFolder 
eclipse.classpath.file {
    beforeMerged { classpath -> 
        classpath.entries.clear()
    }
    whenMerged {  cp -> 
        cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/") }*.output = "bin/main" 
        cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/") }*.output = "bin/test" 
        cp.entries.removeAll { it.kind == "output" }
    }
}

ext.dockerImageTag = project.hasProperty('dockerImageTag') ? project.getProperty('dockerImageTag') : ''

// Diretório do contexto Docker
ext.dockerDir = "${project.buildDir}" + '/docker'
// Caminho do arquivo Jar no contexto do Docker
ext.dockerAppJarFile = dockerDir + '/' + jar.baseName + '.jar'

// Extendendo a task dockerPrepare para explodir o Jar e permitir criar layers dockers para cada categoria de libs
dockerPrepare {
    doLast {
        // Layer Docker com as libs externas, atualizadas com menos frequência e por isso estarão em uma layer abaixo das outras
        copy {
            from(zipTree(file(dockerAppJarFile))) {
                include 'lib/**'
            }
            into dockerDir + '/app-lib-layer'
        }
        // Layer Docker da aplicação em si, conterá um Jar pequeno, o que permite otimizar o pull da imagem do registro.
        copy {
            from(zipTree(file(dockerAppJarFile))) {
                exclude 'lib/**'
            }
            into dockerDir + '/app-layer'
        }
        delete dockerAppJarFile
    }
}

docker {
    name dockerImageName + (dockerImageTag ? ':' + dockerImageTag : '')
    dockerfile 'src/main/docker/Dockerfile'
    files 'src/main/docker/docker-entrypoint.sh', 'truststores/truststore.jks'
    dependsOn tasks.jar, tasks.bootRepackage, tasks.build
}
