buildscript {
    ext {
        springBootVersion = '1.4.0.RELEASE'

        dependencyManagementPlugin = '0.6.0.RELEASE'
        gradleDockerPluginVersion = '0.8.0'
        sonarqubeGradlePluginVersion = '2.0.1'
        springCloudReleaseTrainVersion = 'Brixton.SR4'
        swaggerVersion = '1.0.2'
        logstashLogbackEncoderVersion = '4.7'
        springBootAdminVersion = '1.4.1'
        springHateoasVersion = '0.20.0.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/libs-milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementPlugin}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${gradleDockerPluginVersion}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeGradlePluginVersion}")
    }
}

apply plugin: "io.spring.dependency-management"

apply plugin: 'spring-boot'

apply plugin: 'eclipse'

apply plugin: 'maven'

apply plugin: 'java'

apply plugin: "com.palantir.docker"

apply plugin: 'jacoco'

apply plugin: 'org.sonarqube'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://repo.spring.io/libs-milestone" }
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudReleaseTrainVersion}")
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }
}

configurations.all {
	exclude module: 'spring-boot-starter-tomcat'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter")
    
    compile("org.springframework.boot:spring-boot-starter-actuator")
        
    compile("org.springframework.boot:spring-boot-starter-web")
    
    compile("org.springframework.boot:spring-boot-starter-undertow")
    
    compile("org.springframework.cloud:spring-cloud-starter-oauth2")
    
    compile("org.springframework.cloud:spring-cloud-starter-feign")
    
    compile("org.springframework.cloud:spring-cloud-starter-hystrix")
    
    compile("org.springframework.cloud:spring-cloud-netflix-hystrix-dashboard")
    
    compile("org.springframework.cloud:spring-cloud-starter-turbine")
    
    compile("org.springframework.cloud:spring-cloud-starter-eureka-server")
    
    compile("org.springframework.cloud:spring-cloud-config-server")
    
    compile("com.mangofactory:swagger-springmvc:${swaggerVersion}")
    
    compile("net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}")
    
    compile("de.codecentric:spring-boot-admin-server:${springBootAdminVersion}")
    
    compile("de.codecentric:spring-boot-admin-server-ui:${springBootAdminVersion}")
    
    compile("org.springframework.hateoas:spring-hateoas:${springHateoasVersion}")
    
    testCompile("org.springframework.boot:spring-boot-starter-test")
    
    testCompile("com.jayway.jsonpath:json-path")

    testCompile("org.springframework.security:spring-security-test")    
}

// Cobertura de testes
jacoco {
    toolVersion = '0.7.7.201606060606'
}

ext.dockerImageTag = project.hasProperty('dockerImageTag') ? project.getProperty('dockerImageTag') : ''

// Diretório do contexto Docker
ext.dockerDir = "${project.buildDir}" + '/docker'
// Caminho do arquivo Jar no contexto do Docker
ext.dockerAppJarFile = dockerDir + '/' + jar.baseName + '.jar'

// Extendendo a task dockerPrepare para explodir o Jar e permitir criar layers dockers para cada categoria de libs
dockerPrepare {
    doLast {
        // Layer Docker com as libs externas, atualizadas com menos frequência e por isso estarão em uma layer abaixo das outras
        copy {
            from(zipTree(file(dockerAppJarFile))) {
                include 'BOOT-INF/lib/**'
                include 'org/**'
            }
            into dockerDir + '/app-lib-layer'
        }
        // Layer Docker da aplicação em si, conterá um Jar pequeno, o que permite otimizar o pull da imagem do registro.
        copy {
            from(zipTree(file(dockerAppJarFile))) {
                exclude 'BOOT-INF/lib/**'
                exclude 'org/**'
            }
            into dockerDir + '/app-layer'
        }
        delete dockerAppJarFile
    }
}

docker {
    name dockerImageName + (dockerImageTag ? ':' + dockerImageTag : '')
    dockerfile 'src/main/docker/Dockerfile'
    files 'src/main/docker/docker-entrypoint.sh', 'truststores/truststore.jks'
    dependsOn tasks.jar, tasks.bootRepackage, tasks.build
}